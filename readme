# 🧩 E-Commerce Microservices Backend

This repository contains the **backend** of an e-commerce system built using **microservices architecture**.  
Each service runs independently and communicates via **REST APIs** and **RabbitMQ**.  
Real-time updates are handled with **WebSockets**, and caching is managed using **Redis**.

---

## ⚙️ Tech Stack

- **React Router DOM (frontend)**
- **Node.js** + **Express** + **TypeScript**
- **MongoDB** (per service database)
- **RabbitMQ** (asynchronous communication)
- **Redis** (caching)
- **WebSocket** (real-time updates)
- **Docker & Docker Compose**
- **API Gateway** (centralized validation, error handling, rate limiting)

---

## 🏗️ Services Overview

| Service | Description |
|----------|--------------|
| **API Gateway** | Central entry point, validates requests, applies rate limiting, proxies to other services |
| **Customer Service** | Manages customer registration and data |
| **Product Service** | Handles product data, inventory updates |
| **Order Service** | Manages order creation, updates, and status tracking |
| **Alert Service** | Sends notifications and alerts for specific events |
| **Analytics Service** | Collects and processes analytics data (optional) |

---

## 🧾 .env Configuration

Each service requires its own `.env` file located in its service folder.

### 🛡️ API Gateway (`/api-gateway/.env`)
```env
PORT=5000

# Microservices URLs (local development)
ORDER_SERVICE_URL=http://localhost:5001
PRODUCT_SERVICE_URL=http://localhost:5002
CUSTOMER_SERVICE_URL=http://localhost:5003
ALERTS_SERVICE_URL=http://localhost:5004


👤 Customer Service (/customer-service/.env)
env
Copy code
PORT=5003
RABBITMQ_URI=amqp://localhost
MONGO_URI=mongodb+srv://adilev2000_db_user:Adil%40953947@valar-ecommerce.dw22xbm.mongodb.net/customer-service?retryWrites=true&w=majority&appName=valar-ecommerce
CUSTOMER_QUEUE_NAME=analytics
REDIS_URL=redis://localhost:6379


📦 Product Service (/product-service/.env)
env
Copy code
PORT=5002
MONGO_URI=mongodb://mongo-product:27017/productdb
RABBITMQ_URI=amqp://localhost
ALERTS_SERVICE_URL=http://localhost:5004
ORDER_QUEUE_NAME=orders
PRODUCT_QUEUE_NAME=products
REDIS_HOST=localhost
REDIS_PORT=6379

🛒 Order Service (/order-service/.env)
env
Copy code
PORT=5001
MONGO_URI=mongodb://mongo-product:27017/productdb
RABBITMQ_URI=amqp://localhost
PRODUCT_SERVICE_URL=http://localhost:5002
CUSTOMER_SERVICE_URL=http://localhost:5003
ORDER_QUEUE_NAME=orders
PRODUCT_QUEUE_NAME=products
REDIS_HOST=localhost
REDIS_PORT=6379
WS_PORT=8081

🚨 Alert Service (/alert-service/.env)
env
Copy code
PORT=5004
MONGO_URI=mongodb://mongo-order:27017/orderdb
RABBITMQ_URI=amqp://localhost
QUEUE_NAME=alerts
WS_PORT=8082


📊 Analytics Service (if included)
env
Copy code
PORT=5005
MONGO_URI=mongodb://mongo-analytics:27017/analyticsdb
RABBITMQ_URL=amqp://rabbitmq:5672
REDIS_URL=redis://redis:6379
WEBSOCKET_PORT=8080


🌐 Frontend (/frontend/.env)

VITE_API_BASE_URL=http://localhost:5000/api
VITE_WS_URL=ws://localhost:8081
VITE_ALERT_WS_URL=ws://localhost:8082

🐇 RabbitMQ Exchanges & Queues
Exchange	Publisher	Subscriber(s)	Event
order_exchange	Order Service	Product, Alert, Analytics	order_created, order_updated
product_exchange	Product Service	Order, Analytics	product_updated, stock_low
alert_exchange	Alert Service	-	alert_sent

🔄 Communication Flow
Customer places an order via API Gateway

Order Service creates the order and publishes an event to RabbitMQ

Product Service updates inventory

Analytics Service receives the event and updates metrics

Alert Service sends notifications if needed

API Gateway handles request validation, proxying, and errors

🧠 Redis Usage
Caching product data

Caching analytics and dashboard results

Temporary rate limit counters for API Gateway


🧰 Useful Commands
Task	Command
Build all containers	docker-compose build
Start all containers	docker-compose up
Stop all containers	docker-compose down
Check running containers	docker ps
Logs for a service	docker logs <service-name>

✅ API Gateway Responsibilities
Common error handling

Joi data validation

Rate limiting

Proxying requests to services

Response formatting

Health check route (/health)

🔍 Example Health Check Route
bash
Copy code
GET /api/health
Response:

json
Copy code
{
  "status": "ok",
  "services": {
    "order-service": "running",
    "product-service": "running",
    "customer-service": "running",
    "alert-service": "running"
  }
}
🧩 Folder Structure Example
css
Copy code
backend/
├── api-gateway/
│   ├── src/
│   ├── .env
│   ├── package.json
│   └── tsconfig.json
├── product-service/
│   ├── src/
│   ├── .env
│   ├── package.json
│   └── tsconfig.json
├── order-service/
│   ├── src/
│   ├── .env
│   ├── package.json
│   └── tsconfig.json
├── customer-service/
│   ├── src/
│   ├── .env
│   ├── package.json
│   └── tsconfig.json
├── alert-service/
│   ├── src/
│   ├── .env
│   ├── package.json
│   └── tsconfig.json
├── analytics-service/ (optional)
│   ├── src/
│   ├── .env
│   ├── package.json
│   └── tsconfig.json
├── frontend/
│   ├── src/
│   ├── .env
│   └── package.json
├── docker-compose.yml
└── README.md


Service-Specific Installation
API Gateway
bashcd api-gateway
npm install
npm start

Port: 5000
Purpose: Handles request validation, rate limiting, and proxies requests to other services.

Customer Service
bashcd customer-service
npm install
npm start

Port: 5003
Purpose: Manages customer data and authentication.

Product Service
bashcd product-service
npm install
npm start

Port: 5002
Purpose: Manages product catalog and inventory.

Order Service
bashcd order-service
npm install
npm start

Port: 5001 (HTTP)
Purpose: Handles order creation, updates, and WebSocket broadcasting.

Alert Service
bashcd alert-service
npm install
npm start

Port: 5004 (HTTP)
Purpose: Sends notifications for order and inventory events.

Analytics Service (Optional)
bashcd analytics-service
npm install
npm start

Port: 5005 (HTTP)
Purpose: Collects and processes analytics data for the dashboard.

Frontend
bashcd frontend
npm install
npm run dev
✨ Author

Muhammed Aadil Nv
📧 adilev2000@gmail.com
💻 Passionate about scalable microservice systems and clean architecture.

